#include<iostream>
using namespace std;



//静态成员： static
//静态数据成员：属于类（与对象无关），作用和全局变量类似；
//              所有对象共享同一份数据
// 在编译阶段就分配了内存，类内不分配（是堆栈空间），普通数据成员是
// 在类外单独初始化（属于静态存储空间）

//作用：C++支持静态数据成员的一个主要原因是可以不必使用全局变量。
// 依赖于全局变量的类很容易违反面向对象程序的封装原理。
// 静态数据成员的主要用途是定义类的各个对象所公用的数据，如:统计数据、平均数等。



//静态成员函数：所有对象共享同一个函数；
//              只能直接调用或访问静态数据成员（用类名/对象），若要访问非静态的需要通过对象
//  使用静态成员函数的原因:
//          1.是可以用它在建立任何对象之前处理静态数据成员这是普通成员函数不能实现的。
//          2.编译系统将静态成员函数限定为内部连接，也就是说，与现行的文件相连接的文件中的同名函数不会与该函数发生冲突，维护了该函数的安全性.

// 类外都无法访问其私有静态成员


class Woman
{
public:
	static int m_A;

	static void func()
	{
		m_A = 150;   //静可访问静
  //    m_B=150;    //不可，因为无法区分到底是哪个对象的
		cout << "func 的调用" << endl;
	}

	static void func1(Woman &w)  //若非要访问非静态成员，则只能通过对象名
	{
		w.m_B = 150;
	}

	int m_B; //非静态  静态成员函数只能通过对象访问

};

int Woman:: m_A = 100;

int main_9()
{
	Woman w;
	cout << w.m_A << endl; 

	Woman w1;
	w1.m_A = 200;
	//说明所有对象共享
	//1、通过对象进行访问
	cout << w.m_A << endl;  
	//2、通过类名访问
	cout << Woman::m_A << endl;

	//1、通过对象进行访问
	w1.func();
	//2、通过类名访问
	Woman::func();
	return 0;
}